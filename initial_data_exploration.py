# -*- coding: utf-8 -*-
"""Initial data exploration

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iZgIkG6vGDsTzm_XHUPLf1NscXQFRMoH

**1) Importing the data from the Google Drive link file. The id part is https://drive.google.com/file/d/1FmocjGvyUReH1K0Yl-p8sBAZLarCA9GM/view?usp=sharing found in the shareable link.**
"""

from pydrive.auth import GoogleAuth 
from pydrive.drive import GoogleDrive 
from google.colab import auth 
from oauth2client.client import GoogleCredentials 
import datetime as dt
  
# Authenticate and create the PyDrive client. 
auth.authenticate_user() 
gauth = GoogleAuth() 
gauth.credentials = GoogleCredentials.get_application_default() 
drive = GoogleDrive(gauth)

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from pandas import Series, DataFrame
  
# to get the id part of the file 
id = '1FmocjGvyUReH1K0Yl-p8sBAZLarCA9GM'
  
downloaded = drive.CreateFile({'id':id})  
downloaded.GetContentFile('MiningProcess_Flotation_Plant_Database.csv')   
  
df = pd.read_csv('MiningProcess_Flotation_Plant_Database.csv', decimal=',', sep=',') 
df.head()

df.dtypes

# Converting the date to date.time format
df['date'] =  pd.to_datetime(df['date'])
df.dtypes

# Basic statistics
df.describe(include = 'all')

# Checking NaN and Null values
print("Is there any null value in the dataset?", df.isnull().values.any())
print("Is there any NaN value in the dataset?",df.isna().values.any())

# Creating a correlation matrix to identify the key features

# Compute the correlation matrix
corr = df.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(20, 20))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

"""# **Slicing the data to move the % Iron Concentrate and % Silica Concentrate targets to specific time intervals ahead of the features**

*   **1 Hour offset**
"""

targets_1hr_range = (df['date'] >= '2017-03-10 03:00:00') & (df['date'] <= '2017-09-09 23:00:00')
targets_1hr = df.loc[targets_1hr_range]
targets_1hr = targets_1hr[["% Iron Concentrate", "% Silica Concentrate"]]
targets_1hr = targets_1hr.reset_index()

targets_1hr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= '2017-09-09 22:00:00')
features_1hr = df.loc[targets_1hr_range]
features_1hr = features_1hr.iloc[:,1:22]
features_1hr = features_1hr.reset_index()

df_1hr = pd.concat([features_1hr,targets_1hr], axis=1, sort=False)
df_1hr.head()

targets_1hr_range = (df['date'] >= '2017-03-10 03:00:00') & (df['date'] <= '2017-09-09 23:00:00')
targets_1hr = df.loc[targets_1hr_range]
targets_1hr = targets_1hr[["% Iron Concentrate", "% Silica Concentrate"]]
targets_1hr = targets_1hr.reset_index()
targets_1hr

# Creating a correlation matrix to identify the key features

# Compute the correlation matrix
corr = df_1hr.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(20, 20))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

"""*   **2 Hours offset**

"""

targets_2hr_range = (df['date'] >= '2017-03-10 04:00:00') & (df['date'] <= '2017-09-09 23:00:00')
targets_2hr = df.loc[targets_2hr_range]
targets_2hr = targets_2hr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

targets_2hr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= '2017-09-09 21:00:00')
features_2hr = df.loc[targets_2hr_range].reset_index()
features_2hr = features_2hr.iloc[:,1:22]

df_2hr = pd.concat([features_2hr,targets_2hr], axis=1, sort=False)
df_2hr.head()


# Creating a correlation matrix to identify the key features

# Compute the correlation matrix
corr = df_2hr.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(20, 20))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

"""*   **3 Hours offset**"""

targets_3hr_range = (df['date'] >= '2017-03-10 05:00:00') & (df['date'] <= '2017-09-09 23:00:00')
targets_3hr = df.loc[targets_3hr_range]
targets_3hr = targets_3hr[["% Iron Concentrate", "% Silica Concentrate"]]

targets_3hr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= '2017-09-09 20:00:00')
features_3hr = df.loc[targets_3hr_range]
features_3hr = features_3hr.iloc[:,1:22]

df_3hr = pd.concat([features_3hr,targets_3hr], axis=1, sort=False)
df_3hr.head()


# Creating a correlation matrix to identify the key features

# Compute the correlation matrix
corr = df_3hr.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(20, 20))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

"""*   **4 Hours offset**

"""

targets_4hr_range = (df['date'] >= '2017-03-10 06:00:00') & (df['date'] <= '2017-09-09 23:00:00')
targets_4hr = df.loc[targets_4hr_range]
targets_4hr = targets_4hr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

targets_4hr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= '2017-09-09 19:00:00')
features_4hr = df.loc[targets_4hr_range]
features_4hr = features_4hr.iloc[:,1:22].reset_index()

df_4hr = pd.concat([features_4hr,targets_4hr], axis=1, sort=False)
df_4hr.head()


# Creating a correlation matrix to identify the key features

# Compute the correlation matrix
corr = df_4hr.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(20, 20))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

"""**Testing for 23 hours interval**"""

for n in range(1,23):
  n_target = str(n)
  n_features = str(24 - n)

  date_target = str('2017-03-10 '+ (n_target) + ':00:00')
  date_features = str('2017-09-09 '+ (n_features) + ':00:00')

  targets_nhr_range = (df['date'] >= date_target) & (df['date'] <= '2017-09-09 23:00:00')
  targets_nhr = df.loc[targets_nhr_range]
  targets_nhr = targets_nhr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

  targets_nhr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= date_features)
  features_nhr = df.loc[targets_nhr_range]
  features_nhr = features_nhr.iloc[:,1:22].reset_index()

  df_nhr = pd.concat([features_nhr,targets_nhr], axis=1, sort=False)
  df_nhr = df_nhr.drop(['index'], axis=1)

  # Compute the correlation matrix
  corr = df_nhr.corr()

  # Generate a mask for the upper triangle
  mask = np.triu(np.ones_like(corr, dtype=np.bool))

  # Set up the matplotlib figure
  f, ax = plt.subplots(figsize=(20, 20))
  plt.title(str(n) + ' Hours interval')


  # Generate a custom diverging colormap
  cmap = sns.diverging_palette(220, 10, as_cmap=True)

  # Draw the heatmap with the mask and correct aspect ratio
  sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)
  print()

"""**Checking the difference in correlations compared to the initial correlation matrix**"""

for n in range (1,23):
  n_target = str(n)
  n_features = str(24 - n)

  date_target = str('2017-03-10 '+ (n_target) + ':00:00')
  date_features = str('2017-09-09 '+ (n_features) + ':00:00')

  targets_nhr_range = (df['date'] >= date_target) & (df['date'] <= '2017-09-09 23:00:00')
  targets_nhr = df.loc[targets_nhr_range]
  targets_nhr = targets_nhr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

  targets_nhr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= date_features)
  features_nhr = df.loc[targets_nhr_range]
  features_nhr = features_nhr.iloc[:,1:22].reset_index()

  df_nhr = pd.concat([features_nhr,targets_nhr], axis=1, sort=False)
  df_nhr = df_nhr.drop(['index'], axis=1)
  # Creating a correlation matrix to identify the key features

  # Compute the correlation matrix
  corr = df_nhr.corr()-df.corr()

  # Generate a mask for the upper triangle
  mask = np.triu(np.ones_like(corr, dtype=np.bool))

  # Set up the matplotlib figure
  f, ax = plt.subplots(figsize=(20, 20))
  plt.title(str(n) + ' Hours interval')
  # Generate a custom diverging colormap
  cmap = sns.diverging_palette(220, 10, as_cmap=True)

  # Draw the heatmap with the mask and correct aspect ratio
  sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot = True)

for n in range (1,23):
  n_target = str(n)
  n_features = str(24 - n)

  date_target = str('2017-03-10 '+ (n_target) + ':00:00')
  date_features = str('2017-09-09 '+ (n_features) + ':00:00')

  targets_nhr_range = (df['date'] >= date_target) & (df['date'] <= '2017-09-09 23:00:00')
  targets_nhr = df.loc[targets_nhr_range]
  targets_nhr = targets_nhr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

  targets_nhr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= date_features)
  features_nhr = df.loc[targets_nhr_range]
  features_nhr = features_nhr.iloc[:,1:22].reset_index()

  df_nhr = pd.concat([features_nhr,targets_nhr], axis=1, sort=False)
  df_nhr = df_nhr.drop(['index'], axis=1)
  # Creating a correlation matrix to identify the key features

  # Compute the correlation matrix
  corr = df_nhr.corr()-df.corr()
  s = corr.unstack()
  so = s.sort_values(kind="quicksort")
  print("For interval difference = " + str(n))
  print(so)
  print()

for n in range (1,23):
  n_target = str(n)
  n_features = str(24 - n)

  date_target = str('2017-03-10 '+ (n_target) + ':00:00')
  date_features = str('2017-09-09 '+ (n_features) + ':00:00')

  targets_nhr_range = (df['date'] >= date_target) & (df['date'] <= '2017-09-09 23:00:00')
  targets_nhr = df.loc[targets_nhr_range]
  targets_nhr = targets_nhr[["% Iron Concentrate", "% Silica Concentrate"]].reset_index()

  targets_nhr_range = (df['date'] >= '2017-03-10 02:00:00') & (df['date'] <= date_features)
  features_nhr = df.loc[targets_nhr_range]
  features_nhr = features_nhr.iloc[:,1:22].reset_index()

  df_nhr = pd.concat([features_nhr,targets_nhr], axis=1, sort=False)
  df_nhr = df_nhr.drop(['index'], axis=1)
  # Creating a correlation matrix to identify the key features

  # Compute the correlation matrix
  iron_n = targets_nhr[["% Iron Concentrate", "% Iron Feed"]]
  silica_n = targets_nhr[["% Silica Concentrate", "% Silica Feed"]]

  iron_ini = df[["% Iron Concentrate", "% Iron Feed"]]
  silica_ini = df[["% Silica Concentrate", "% Silica Feed"]]

  corr_ = df_nhr.corr()-df.corr()
  s = corr.unstack()
  so = s.sort_values(kind="quicksort")
  print("For interval difference = " + str(n))
  print(so)
  print()